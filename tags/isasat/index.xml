<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>isasat on Webpage of Mathias Fleury</title>
    <link>https://m-fleury.github.io/tags/isasat/</link>
    <description>Recent content in isasat on Webpage of Mathias Fleury</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://m-fleury.github.io/tags/isasat/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IsaSAT Presentation</title>
      <link>https://m-fleury.github.io/isasat/isasat-presentation/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-presentation/</guid>
      <description>As part of my PhD thesis, I developed a framework to formalize SAT solving. I still continue to expand it. The general organization is given by the following graph: . If you want to have a look at the sources, look at the IsaFoL repository (this is the latest bleeding age version, so it is sometimes broken) and the Isabelle-generated HTML documentation (look at the &amp;ldquo;IsaFoL&amp;rdquo; version at the bottom to know the corresponding git ID).</description>
    </item>
    
    <item>
      <title>IsaSAT Release</title>
      <link>https://m-fleury.github.io/isasat/isasat-release/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-release/</guid>
      <description>SAT Competition 2022 and v2022-01 The second release is now available. It is the version submitted to the SAT Competition 2022. This year I managed to make IsaSAT work on StarExec.
Compared to the version form the EDA Challenge:
It can now produces DRAT proofs. There are absolutely no guarantees on the correctness of those proofs&amp;hellip; And in particular, I have managed to produce wrong proofs when I forgot to log unit clauses.</description>
    </item>
    
    <item>
      <title>Used Flag</title>
      <link>https://m-fleury.github.io/isasat/isasat-used/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-used/</guid>
      <description>This is the detailed story of my Tweet about the used flag.
Database Reduction Some background first. CDCLÂ solvers learns clauses. Actually they generate way too many clauses to keep all of them. So you have to remove them. Actually many of them. This happens during so-called reductions.
This comes from the theory of CDCL. There are two way to keep completeness: either delay restarts more-and-more or keep more-and-more clauses. But this does not tell you which clauses you have to keep during reductions.</description>
    </item>
    
  </channel>
</rss>
