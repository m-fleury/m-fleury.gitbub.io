<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webpage of Mathias Fleury</title>
    <link>https://m-fleury.github.io/</link>
    <description>Recent content on Webpage of Mathias Fleury</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Aug 2021 07:05:44 +0200</lastBuildDate><atom:link href="https://m-fleury.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Academic duties</title>
      <link>https://m-fleury.github.io/academic/</link>
      <pubDate>Sat, 14 Aug 2021 10:49:01 +0200</pubDate>
      
      <guid>https://m-fleury.github.io/academic/</guid>
      <description>List of the PCs I took part in.
Academic Duties 2021  Co-chair of PxTP 2021, Seventh Workshop on Proof eXchange for Theorem Proving PC of PDAR-21, Parallel and Distributed Automated Reasoning 2021 PC of CAV 2021-Artifact Evaluation, 33rd International Conference on Computer-Aided Verification PC of Artefact Evaluation, 27th International Conference on Tools and Algorithms for the Construction and Analysis of Systems  2020  PC of TAP 20- Artefact Evaluation, 14th International Conference on Tests and Proofs 20 PC of VMCAI-20 - Artefact Evaluation, 21st International Conference on Verification, Model Checking, and Abstract Interpretation  2019  PC of PxTP 2019, Seventh Workshop on Proof eXchange for Theorem Proving  </description>
    </item>
    
    <item>
      <title>Programs</title>
      <link>https://m-fleury.github.io/sources/sources/</link>
      <pubDate>Sat, 14 Aug 2021 07:05:44 +0200</pubDate>
      
      <guid>https://m-fleury.github.io/sources/sources/</guid>
      <description>Here the release of my projects that I manage myself (so unlike my changes to, e.g., CaDiCaL).
IsaSAT 2021: EDA Challenge This the first official release of the IsaSAT in LLVM IR. See the sources and the system description submitted at the EDA Challenge for a list of changes compared to IsaSAT in Standard ML.
The main difference compared to the Standard ML version developped in my PhD is that the Isabelle theorem is now incomplete (this was implicit earlie) and that the new version is much faster.</description>
    </item>
    
    <item>
      <title>My Research</title>
      <link>https://m-fleury.github.io/research/</link>
      <pubDate>Sat, 14 Aug 2021 07:05:34 +0200</pubDate>
      
      <guid>https://m-fleury.github.io/research/</guid>
      <description>This webpage contains documents that I generated, like the Isabelle documentation from my PhD thesis. This is the only way to have links which survives changes in my affiliation.
Research SAT Solver Framework As part of my PhD thesis, I developed a framework to formalize SAT solving. I still continue to expend it. It is not a very fast SAT solver, but you are guaranteed that the answer is correct and that there is no overflow happening internally that would compromise correctness.</description>
    </item>
    
    <item>
      <title>IsaSAT</title>
      <link>https://m-fleury.github.io/isasat/isasat/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat/</guid>
      <description>IsaSAT is one of the few verified SAT solvers (and to my knowledge the only one that is currently maintained). It is verified in Isabelle using the Isabelle Refinement Framework by synthesizing code. See the presentation for more details.</description>
    </item>
    
    <item>
      <title>IsaSAT Presentation</title>
      <link>https://m-fleury.github.io/isasat/isasat-presentation/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-presentation/</guid>
      <description>As part of my PhD thesis, I developed a framework to formalize SAT solving. I still continue to expand it. The general organization is given by the following graph: SAT Solver Framework I start with an abstract specification of CDCL and prove termination and correctness. CDCL is specified as an abstract transition system. I have developped two variants: one based on Nieuwenhuis et al. and a more concrete one based on Weidenbach&amp;rsquo;s version of CDCL.</description>
    </item>
    
    <item>
      <title>IsaSAT Release</title>
      <link>https://m-fleury.github.io/isasat/isasat-release/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-release/</guid>
      <description>EDA-Challenge 2021 The first official release is available. It is the version submitted to the EDA-Challenge 2021. To the surprise of everyone (including the author!), it actually won the challenge. The system description submitted to the EDA Challenge is available.
How good is the solver really? Another comparison is the well-known SAT Competition that features hard instances with long running time. The comparison is unfair towards my SAT solver (because you need inprocessing nowadays to even have a chance for most instances), but the SAT Competition is the standard way to compare solvers.</description>
    </item>
    
    <item>
      <title>Pastèque Presentation</title>
      <link>https://m-fleury.github.io/pasteque/pasteque-presentation/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/pasteque/pasteque-presentation/</guid>
      <description>While I don&amp;rsquo;t understand much algebra, I know Isabelle and implemented a checker in Isabelle/HOL. I used the Refinement Framework and Sepref to generated code in Standard ML. The code is mostly functional (except for the hashmap that is synthesized automatically by Sepref &amp;ndash; no need to understand and know anything about it!).
How does Pastèque work? I started with an abstract calculus that models the rules of the proofs system.</description>
    </item>
    
    <item>
      <title>Pastèque Release</title>
      <link>https://m-fleury.github.io/pasteque/pasteque-release/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/pasteque/pasteque-release/</guid>
      <description>Pastèque 2 Pastèque 2 is available on the IsaFoL repository and the HTML generation can be seen too. The source code can be found here.
Pastèque 1 Pastèque 1 is available with the Isabelle formalization on the Archive of Formal Proofs, where it is maintained and kept up-to-date. The release is also available here.</description>
    </item>
    
    <item>
      <title>Used Flag</title>
      <link>https://m-fleury.github.io/isasat/isasat-used/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-used/</guid>
      <description>This is the detailed story of my Tweet about the used flag.
Database Reduction Some background first. CDCL solvers learns clauses. Actually they generate way too many clauses to keep all of them. So you have to remove them. Actually many of them. This happens during so-called reductions.
This comes from the theory of CDCL. There are two way to keep completeness: either delay restarts more-and-more or keep more-and-more clauses. But this does not tell you which clauses you have to keep during reductions.</description>
    </item>
    
  </channel>
</rss>
