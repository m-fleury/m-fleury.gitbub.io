<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webpage of Mathias Fleury</title>
    <link>https://m-fleury.github.io/</link>
    <description>Recent content on Webpage of Mathias Fleury</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Jul 2022 19:08:45 +0200</lastBuildDate><atom:link href="https://m-fleury.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Talks</title>
      <link>https://m-fleury.github.io/talks/</link>
      <pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/talks/</guid>
      <description>On this page, I list all my talks and slides. Remark that several talks are impossible to understand without me talking (this is half of the point of the talk: someone is talking).
2022  Mathias Fleury, Verifying Solvers: How Much Do You Want to Prove?           Dagstuhl 22411 Slides     Mathias Fleury, Discussion: How to compare techniques in solvers?</description>
    </item>
    
    <item>
      <title>My Research</title>
      <link>https://m-fleury.github.io/research/</link>
      <pubDate>Wed, 13 Jul 2022 19:08:45 +0200</pubDate>
      
      <guid>https://m-fleury.github.io/research/</guid>
      <description>This webpage contains documents that I generated, like the Isabelle documentation from my PhD thesis. This is the only way to have links which survives changes in my affiliation.
For my publications, please look here; for my academic duties, please look here.
Research SAT Solver Framework isasatCDCL As part of my PhD thesis, I developed a framework to formalize SAT solving. I still continue to expend it. It is not a very fast SAT solver, but you are guaranteed that the answer is correct and that there is no overflow happening internally that would compromise correctness.</description>
    </item>
    
    <item>
      <title>Programs</title>
      <link>https://m-fleury.github.io/sources/sources/</link>
      <pubDate>Tue, 01 Mar 2022 12:02:52 +0100</pubDate>
      
      <guid>https://m-fleury.github.io/sources/sources/</guid>
      <description>Here the release of my projects that I manage myself (so unlike my changes to, e.g., CaDiCaL).
IsaSAT 2021: EDA Challenge This the first official release of the IsaSAT in LLVM IR. See the sources and the system description submitted at the EDA Challenge for a list of changes compared to IsaSAT in Standard ML.
The main difference compared to the Standard ML version developped in my PhD is that the Isabelle theorem is now incomplete (this was implicit earlier in the sense that it is a limit of the compiler, not a limit of the program) and that the new version is much faster.</description>
    </item>
    
    <item>
      <title>Academic Duties</title>
      <link>https://m-fleury.github.io/academic/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/academic/</guid>
      <description>List of the PCs I took part in. I do not include subreviews in the list.
2023  PC of Frocos 2023 PC of CAV 2023 - Artifact Evaluation, 34th International Conference on Computer-Aided Verification Review for Mathematics in Computer Science  2022  PC of the stundent forum of FMCAD22, Formal Methods in Computer-Aided Design PC of CAV 2022 - Artifact Evaluation, 34th International Conference on Computer-Aided Verification PC of IJCAR 2022 - International Joint Conference on Automated Reasoning PC of TACAS - Artefact Evaluation, 28th International Conference on Tools and Algorithms for the Construction and Analysis of Systems  2021  Co-chair of PxTP 2021, Seventh Workshop on Proof eXchange for Theorem Proving Review for Journal of Artificial Intelligence PC of CAV 2021 - Artifact Evaluation, 33rd International Conference on Computer-Aided Verification PC of PDAR-21, Parallel and Distributed Automated Reasoning 2021 PC of TACAS - Artefact Evaluation, 27th International Conference on Tools and Algorithms for the Construction and Analysis of Systems  2020  PC of TAP 20 - Artefact Evaluation, 14th International Conference on Tests and Proofs 20 PC of VMCAI-20 - Artefact Evaluation, 21st International Conference on Verification, Model Checking, and Abstract Interpretation  2019  PC of PxTP 2019, Seventh Workshop on Proof eXchange for Theorem Proving  </description>
    </item>
    
    <item>
      <title>IsaSAT Presentation</title>
      <link>https://m-fleury.github.io/isasat/isasat-presentation/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-presentation/</guid>
      <description>As part of my PhD thesis, I developed a framework to formalize SAT solving. I still continue to expand it. The general organization is given by the following graph: . If you want to have a look at the sources, look at the IsaFoL repository (this is the latest bleeding age version, so it is sometimes broken) and the Isabelle-generated HTML documentation (look at the &amp;ldquo;IsaFoL&amp;rdquo; version at the bottom to know the corresponding git ID).</description>
    </item>
    
    <item>
      <title>IsaSAT Release</title>
      <link>https://m-fleury.github.io/isasat/isasat-release/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-release/</guid>
      <description>SAT Competition 2022 and v2022-01 The second release is now available. It is the version submitted to the SAT Competition 2022. This year I managed to make IsaSAT work on StarExec.
Compared to the version form the EDA Challenge:
  It can now produces DRAT proofs. There are absolutely no guarantees on the correctness of those proofs&amp;hellip; And in particular, I have managed to produce wrong proofs when I forgot to log unit clauses.</description>
    </item>
    
    <item>
      <title>Pastèque Presentation</title>
      <link>https://m-fleury.github.io/pasteque/pasteque-presentation/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/pasteque/pasteque-presentation/</guid>
      <description>While I don&amp;rsquo;t understand much algebra, I know Isabelle and implemented a checker in Isabelle/HOL. I used the Refinement Framework and Sepref to generated code in Standard ML. The code is mostly functional (except for the hashmap that is synthesized automatically by Sepref &amp;ndash; no need to understand and know anything about it!).
How does Pastèque work? I started with an abstract calculus that models the rules of the proofs system.</description>
    </item>
    
    <item>
      <title>Pastèque Release</title>
      <link>https://m-fleury.github.io/pasteque/pasteque-release/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/pasteque/pasteque-release/</guid>
      <description>Pastèque 2 Pastèque 2 is available on the IsaFoL repository and the HTML generation can be seen too. The source code can be found here.
Pastèque 1 Pastèque 1 is available with the Isabelle formalization on the Archive of Formal Proofs, where it is maintained and kept up-to-date. The release is also available here.</description>
    </item>
    
    <item>
      <title>Publications</title>
      <link>https://m-fleury.github.io/publications/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/publications/</guid>
      <description>This webpage is also available as long version with the bibtex entries (both pages are under construction).
2022 Mathias Fleury and Armin Biere, Scalable Proof Producing Multi-Threaded SAT Solving with Gimsatul through Sharing instead of Copying Clauses    POS 22 arXiV     Pragmatics of SAT 22 Accepted    (POS has no proceedings)    Shaowei Cai, Xindi Zhang, Mathias Fleury, and Armin Biere, Better Decision Heuristics in CDCL through Local Search and Target Phases    FMSD JAIR      Accepted      Daniela Kaufmann, Mathias Fleury, Armin Biere, and Manuel Kauers, Practical Algebraic Calculus and Nullstellensatz with the Checkers Pacheck and Pastèque and Nuss-Checker    FMSD Preprint Springer     Accepted      2021 Mathias Fleury and Armin Biere, Efficient All-UIP Learned Clause Minimization    SAT&#39;21, LNCS Preprint Springer     Proc.</description>
    </item>
    
    <item>
      <title>Publications long</title>
      <link>https://m-fleury.github.io/publications-long/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/publications-long/</guid>
      <description>2022 Mathias Fleury and Armin Biere, Scalable Proof Producing Multi-Threaded SAT Solving with Gimsatul through Sharing instead of Copying Clauses    POS 22 arXiV     Pragmatics of SAT 22 Accepted    (POS has no proceedings)    @misc{FleuryBiere-POS22, title = {Scalable Proof Producing Multi-Threaded SAT Solving with Gimsatul through Sharing instead of Copying Clauses}, author = {Fleury, Mathias and Biere, Armin}, editor = {Matti J\&amp;#34;arvisalo and Daniel Le Berre} doi = {10.</description>
    </item>
    
    <item>
      <title>Used Flag</title>
      <link>https://m-fleury.github.io/isasat/isasat-used/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://m-fleury.github.io/isasat/isasat-used/</guid>
      <description>This is the detailed story of my Tweet about the used flag.
Database Reduction Some background first. CDCL solvers learns clauses. Actually they generate way too many clauses to keep all of them. So you have to remove them. Actually many of them. This happens during so-called reductions.
This comes from the theory of CDCL. There are two way to keep completeness: either delay restarts more-and-more or keep more-and-more clauses. But this does not tell you which clauses you have to keep during reductions.</description>
    </item>
    
  </channel>
</rss>
