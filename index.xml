<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webpage of Mathias Fleury</title>
    <link>https://m-fleury.github.io/</link>
    <description>Recent content on Webpage of Mathias Fleury</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Jul 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://m-fleury.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IsaSAT Releases</title>
      <link>https://m-fleury.github.io/isasat/isasat-release/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/isasat/isasat-release/</guid>
      <description>SAT Competition 2023 This year, once again, I submitted IsaSAT to the SAT Competition 2023 (the source code is as always available). According to the results, I did not finish last. However, compared to other solvers, I am trailing in the unsatisfiable instances. I believe that this is due to the fact that I still do not have bounded variable elimination. In the past, I assumed that vivification was also very important, but its importance is now less clear after Daniela and I attempted to examine it more precisely for POS&#39;23 on the SAT solver CaDiCaL.</description>
    </item>
    <item>
      <title>Academic Duties</title>
      <link>https://m-fleury.github.io/academic/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/academic/</guid>
      <description>List of the PCs I took part in. I do not include subreviews in the list.&#xA;2024 PC of CAV 2024 - Artifact Evaluation, 35th International Conference on Computer-Aided Verification 2023 PC of SBMF 2023 PC of Frocos 2023 PC of FMCAD&#39;23 PC of FMCAD&#39;23 student forum PC of iFM artefact evaluation PC of CAV 2023 - Artifact Evaluation, 34th International Conference on Computer-Aided Verification Review for Mathematics in Computer Science 2022 PC of the stundent forum of FMCAD22, Formal Methods in Computer-Aided Design PC of CAV 2022 - Artifact Evaluation, 34th International Conference on Computer-Aided Verification PC of IJCAR 2022 - International Joint Conference on Automated Reasoning PC of TACAS - Artefact Evaluation, 28th International Conference on Tools and Algorithms for the Construction and Analysis of Systems 2021 Co-chair of PxTP 2021, Seventh Workshop on Proof eXchange for Theorem Proving Review for Journal of Artificial Intelligence PC of CAV 2021 - Artifact Evaluation, 33rd International Conference on Computer-Aided Verification PC of PDAR-21, Parallel and Distributed Automated Reasoning 2021 PC of TACAS - Artefact Evaluation, 27th International Conference on Tools and Algorithms for the Construction and Analysis of Systems 2020 PC of TAP 20 - Artefact Evaluation, 14th International Conference on Tests and Proofs 20 PC of VMCAI-20 - Artefact Evaluation, 21st International Conference on Verification, Model Checking, and Abstract Interpretation 2019 PC of PxTP 2019, Seventh Workshop on Proof eXchange for Theorem Proving </description>
    </item>
    <item>
      <title>Publications</title>
      <link>https://m-fleury.github.io/publications/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/publications/</guid>
      <description>This webpage is also available as long version with the bibtex entries (both pages are under construction).&#xA;2023 Hanna Lachnitt, Mathias Fleury, Leni Aniva, Andrew Reynolds, Haniel Barbosa, Andres Noetzli, Clark W. Barrett and Cesare Tinelli, Automatic Verification of {SMT} Rewrites in Isabelle/HOL SMT Workshop 2023 Abstract Armin Biere, Mathias Fleury, and Florian Pollitt, CaDiCaL_vivinst, IsaSAT, Gimsatul, Kissat, and TabularaSAT Entering the SAT Competition 2023 SAT Competition 2023 system description (not reviewed) Robin Trüby, Mathias Fleury, and Armin Biere, Verifying Floating-Point Commutativity with GRS SAT Competition 2023 benchmarks (not reviewed) Sonja Gurtner, Lucas Klemmer, Mathias Fleury and Daniel Große, Replacing RISC-V Instructions by Others SAT Competition 2023 benchmarks (not reviewed) Mathias Fleury and Peter Lammich, A more Pragmatic CDCL for IsaSAT and targetting LLVM (Short Paper) CADE 29 Preprint Springer (OA, upcoming) 29th International Conference on Automated Deduction Florian Politt, Mathias Fleury, and Armin Biere, Efficient Proof Checking with LRAT in CaDiCaL (work in progress) MBMV 23 Preprint Florian Politt, Mathias Fleury, and Armin Biere, Faster LRAT Checking than Solving with CaDiCaL SAT23 Preprint LiPiCS Mathias Fleury and Daniela Kaufmann, Lifespan of SAT techniques POS 23 Pragmatics of SAT 23 Accepted (POS has no proceedings) Armin Biere , Mathias Fleury , Nils Froleyks and Marijn Heule .</description>
    </item>
    <item>
      <title>Duties</title>
      <link>https://m-fleury.github.io/duties/</link>
      <pubDate>Thu, 06 Apr 2023 08:19:09 +0200</pubDate>
      <guid>https://m-fleury.github.io/duties/</guid>
      <description>As part of my university job, I publish papers, rewiew others, teach, but also do some administrative tasks.</description>
    </item>
    <item>
      <title>University and Other Duties</title>
      <link>https://m-fleury.github.io/university/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/university/</guid>
      <description>2024 Co-organization of the SAT/SMT/AR Summer School (in Nancy) with Sophie Tourret and Martin Bromberger Vice-head of the W2 group proof cost-action (started 2023). 2023 Vice-head of the W2 group proof cost-action. Committee for the Embedded System Professorship from the University Freiburg IAAA accreditation committee for the Frankreich-Zentrum from the University Freiburg </description>
    </item>
    <item>
      <title>Talks</title>
      <link>https://m-fleury.github.io/talks/</link>
      <pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/talks/</guid>
      <description>On this page, I list all my talks and slides. Remark that several talks are impossible to understand without me talking (this is half of the point of the talk: someone is talking).&#xA;2023 Mathias Fleury and Peter Lammich, Porting IsaSAT to LLVM (and Inprocessing) Porting IsaSAT to LLVM (and Inprocessing) Mathias Fleury, MDX Isabelle Summer School SMT Reconstruction, shortened Checkers and solvers 2022 Mathias Fleury, Verifying Solvers: How Much Do You Want to Prove?</description>
    </item>
    <item>
      <title>My Research</title>
      <link>https://m-fleury.github.io/research/</link>
      <pubDate>Wed, 13 Jul 2022 19:08:45 +0200</pubDate>
      <guid>https://m-fleury.github.io/research/</guid>
      <description>This webpage contains documents that I generated, like the Isabelle documentation from my PhD thesis. This is the only way to have links which survives changes in my affiliation.&#xA;For my publications, please look here; for my academic duties, please look here.&#xA;Research SAT Solver Framework isasatCDCL As part of my PhD thesis, I developed a framework to formalize SAT solving. I still continue to expend it. It is not a very fast SAT solver, but you are guaranteed that the answer is correct and that there is no overflow happening internally that would compromise correctness.</description>
    </item>
    <item>
      <title>Programs</title>
      <link>https://m-fleury.github.io/sources/sources/</link>
      <pubDate>Tue, 01 Mar 2022 12:02:52 +0100</pubDate>
      <guid>https://m-fleury.github.io/sources/sources/</guid>
      <description>Here the release of my projects that I manage myself (so unlike my changes to, e.g., CaDiCaL).&#xA;IsaSAT 2021: EDA Challenge This the first official release of the IsaSAT in LLVM IR. See the sources and the system description submitted at the EDA Challenge for a list of changes compared to IsaSAT in Standard ML.&#xA;The main difference compared to the Standard ML version developped in my PhD is that the Isabelle theorem is now incomplete (this was implicit earlier in the sense that it is a limit of the compiler, not a limit of the program) and that the new version is much faster.</description>
    </item>
    <item>
      <title>IsaSAT</title>
      <link>https://m-fleury.github.io/isasat/isasat/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/isasat/isasat/</guid>
      <description>IsaSAT is one of the few verified SAT solvers (and to my knowledge the only one that is currently maintained). It is verified in Isabelle using the Isabelle Refinement Framework by synthesizing code. See the presentation for more details.</description>
    </item>
    <item>
      <title>IsaSAT Presentation</title>
      <link>https://m-fleury.github.io/isasat/isasat-presentation/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/isasat/isasat-presentation/</guid>
      <description>As part of my PhD thesis, I developed a framework to formalize SAT solving. I still continue to expand it. The general organization is given by the following graph: . If you want to have a look at the sources, look at the IsaFoL repository (this is the latest bleeding age version, so it is sometimes broken) and the Isabelle-generated HTML documentation (look at the &amp;ldquo;IsaFoL&amp;rdquo; version at the bottom to know the corresponding git ID).</description>
    </item>
    <item>
      <title>Pastèque Presentation</title>
      <link>https://m-fleury.github.io/pasteque/pasteque-presentation/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/pasteque/pasteque-presentation/</guid>
      <description>While I don&amp;rsquo;t understand much algebra, I know Isabelle and implemented a checker in Isabelle/HOL. I used the Refinement Framework and Sepref to generated code in Standard ML. The code is mostly functional (except for the hashmap that is synthesized automatically by Sepref &amp;ndash; no need to understand and know anything about it!).&#xA;How does Pastèque work? I started with an abstract calculus that models the rules of the proofs system.</description>
    </item>
    <item>
      <title>Pastèque Release</title>
      <link>https://m-fleury.github.io/pasteque/pasteque-release/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/pasteque/pasteque-release/</guid>
      <description>Pastèque 2 Pastèque 2 is available on the IsaFoL repository and the HTML generation can be seen too. The source code can be found here.&#xA;Pastèque 1 Pastèque 1 is available with the Isabelle formalization on the Archive of Formal Proofs, where it is maintained and kept up-to-date. The release is also available here.</description>
    </item>
    <item>
      <title>Publications long</title>
      <link>https://m-fleury.github.io/publications-long/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/publications-long/</guid>
      <description>2023 Hanna Lachnitt, Mathias Fleury, Leni Aniva, Andrew Reynolds, Haniel Barbosa, Andres Noetzli, Clark W. Barrett and Cesare Tinelli, Automatic Verification of {SMT} Rewrites in Isabelle/HOL SMT Workshop 2023 Abstract @inproceedings{LachnittFleuryEtAlCVC5Rare, author = {Hanna Lachnitt and Mathias Fleury and Leni Aniva and Andrew Reynolds and Haniel Barbosa and Andres N{\&amp;#34;{o}}tzli and Clark W. Barrett and Cesare Tinelli}, editor = {St{\&amp;#39;{e}}phane Graham{-}Lengrand and Mathias Preiner}, title = {Automatic Verification of {SMT} Rewrites in Isabelle/HOL}, booktitle = {Proceedings of the 21st International Workshop on Satisfiability Modulo Theories {(SMT} 2023) co-located with the 29th International Conference on Automated Deduction {(CADE} 2023), Rome, Italy, July, 5-6, 2023}, series = {{CEUR} Workshop Proceedings}, volume = {3429}, pages = {78}, publisher = {CEUR-WS.</description>
    </item>
    <item>
      <title>Used Flag</title>
      <link>https://m-fleury.github.io/isasat/isasat-used/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://m-fleury.github.io/isasat/isasat-used/</guid>
      <description>This is the detailed story of my Tweet about the used flag.&#xA;Database Reduction Some background first. CDCL solvers learns clauses. Actually they generate way too many clauses to keep all of them. So you have to remove them. Actually many of them. This happens during so-called reductions.&#xA;This comes from the theory of CDCL. There are two way to keep completeness: either delay restarts more-and-more or keep more-and-more clauses. But this does not tell you which clauses you have to keep during reductions.</description>
    </item>
  </channel>
</rss>
