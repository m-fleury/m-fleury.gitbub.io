#+TITLE: Mathias Fleury's web page
#+AUTHOR: Mathias Fleury
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

This webpage will contain documents that I generated, like the
Isabelle documentation from my PhD thesis. This is the only way to
have links which survives changes in my affiliation.


More to come soon.

* Papers
** SAT Solver Framework
As part of my PhD thesis, I developed a framework to formalize SAT solving. The
general organization is given by the following graph:
[[file:figures/sat/sat_framework.png]]

Thep PCDCL (standing for pragmatic CDCL) and IsaSAT/LLVM have not yet been
described in a publications, but have already been included in the Isabelle
formalization (and currently no inprocessing is done).

In essence, the completeness mentioned in the graph, means completeness unless
you cannot allocate enough memory:
  + In the Standard ML modelisation of Isabelle, arrays can be accessed by
    arbitrary sized integers. However, compilers do not have to support that.
    Therefore, in practice, the memory is limited to around 2^{61} bits to represent the
    clauses and their headers. Such machines currently do not exist (and filling
    so much memory takes a very long time too).
  + In LLVM, we are restricted to a certain number of clauses. With infinite
    memory (more than 2^{63} bits), the answer could become "UNKNOWN" (but
    no overflow will lead to a wrong error!)
** SAT Solving
TODO
** Proof Reconstruction
TODO
* PhD Thesis
My thesis comes with some fancy Isabelle documentation
[[https://m-fleury.github.io/thesis/doc/Weidenbach_Book/index.html][available here]] and it would be too bad for the
links to get lost. The documentation refers to the =fleury-thesis= branch of IsaFoL available at
[[https://bitbucket.org/isafol/isafol/wiki/Home]].

* External links
My current webpage can be found at [[http://fmv.jku.at/fleury/index.html]]
* Other Projects
I work in my free time on Isabelle-emacs available at
https://github.com/m-fleury/isabelle-emacs/. It slightly extends Isabelle's LSP
server (no change is done to Isabelle's kernel nor to Isabelle/jEdit) and make
Isabelle usable for Emacs. If you don't like Isabelle/jEdit or find it unstable
and unusable, this provides an alternative.
