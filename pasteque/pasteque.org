#+TITLE: Pastèque
#+AUTHOR: Mathias Fleury
#+STARTUP: fninline
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>

* Pastèque                                                           :draft:
I work with [[https://danielakaufmann.at/][Daniela Kaufmann]] on checking (L)PAC proofs in a formally verified
way. She works on verifying multipliers with algebraic methods and Gröbner
bases. I don't understand all the algebra behind, but the resulting certificate
simply consists in checking whether addition and multiplication of polynomials
is done correctly and if the "target" was derived at some point in the
certificate. If so, the multiplier is correct. Otherwise, it is not (and a
counterexample can be derived).

While I don't understand the algebra, I know Isabelle and implemented a checker
in Isabelle/HOL. I used the Refinement Framework and Sepref to generated code in
Standard ML. The code is mostly functional (except for the hashmap that is
synthesized automatically by Sepref -- no need to understand and know anything
about it!).

How does Pastèque work? I started with an abstract calculus that models the
rules of the proofs system. Then I make the calculus more concrete, e.g., with
lists to represent polynomials. Finally, I make everything executable.

Now, you might wonder why I did not target LLVM using the Isabelle-LLVM. Well,
we need arbitrary large integers and there is no binding from Isabelle-LLVM to
GMP and no hand-written library for it.

* Release                                                             :draft:
